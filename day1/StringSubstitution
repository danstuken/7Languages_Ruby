String subsitution using native string methods:
	.sub()
	.sub!()

The inclusion of the second method would imply that ruby strings are, by
convention at least, immutable. We must work harder if we want to mutate
our original string.

These two methods operate using regular expressions. *gulp*...where'd I 
put my Camel book again?

These are the samples given in the core API doc:
(1)   "hello".sub(/[aeiou]/, '*')                  #=> "h*llo"
(2)   "hello".sub(/([aeiou])/, '<\1>')             #=> "h<e>llo"
(3a)  "hello".sub(/./) {|s| s[0].to_s + ' ' }     #=> "104 ello"

Ruby 1.9 supports the following two as well:

(3b)  "hello".sub(/./) {|s| s.ord.to_s + ' ' }     #=> "104 ello"
(4)   "hello".sub(/(?<foo>[aeiou])/, '*\k<foo>*')  #=> "h*e*llo"dd
(5)   'Is SHELL your preferred shell?'.sub(/[[:upper:]]{2,}/, ENV)
    #=> "Is /bin/bash your preferred shell?" 

(1)
 This is a simple substitution of a character found within a character set.
Note that ruby is only apply the substitution to the first match found: the 
terminating 'o' is not altered.

(2)
 As before we are matching on a character within a set but this time, by 
wrapping a part of the regexp in brackets '(' and ')' we are storing any
match into a back-reference. In the replacement string we refer to this
back-reference using its numerical ordinal (1) thus: '\1'.

(3)
 The special character '.', for matching any character is used this time. The
replacement is provided as a block and the 'current' match is passed in as a 
parameter.

(3a)
 The v1.8.7 version of the code uses the fact that a string can be accessed as
an array to get back a Fixnum of the character's ordinal value.

(3b)
 As of v1.9 we have an ord() method on strings. This method will get the 
ordinal value of the first character. Note that this could be a multi-byte
character.

(3)
 In both cases, the to_s is important. Without it the '+' operator will attempt
to coerce the space string (' ') to a number and fail.

(4)
 Here we're using a new ruby 1.9 feature *untested coz only got 1.8* that 
introduced named regular expression groups. The (?<>) syntax names the 
matched group and the \k replays the named group.

(5)
 Another new to 1.9 feature is the use of a hash to provide replacement values
by taking the match value as the hash key. In this case the global ENV hash
is indexed using the matched string "SHELL" and this match is then replaced
with the returned value.
